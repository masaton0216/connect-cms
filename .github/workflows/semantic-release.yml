# ワークフローの名前
name: Semantic Release on Merge

# ワークフローが実行されるトリガー
on:
  workflow_dispatch: # 手動実行のみ

# 実行されるジョブを定義
jobs:
  release:
    runs-on: ubuntu-latest
    # contents: write はコミット＆プッシュとリリース作成に必要
    permissions:
      contents: write
      pull-requests: read

    steps:
      # 1. リポジトリのコードをチェックアウトする
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      # 2. 最新のセマンティックバージョンのタグを取得する
      - name: Get previous tag
        id: previous_tag
        uses: WyriHaximus/github-action-get-previous-tag@v1
        with:
          fallback: v0.0.0 # タグが一つも無い場合は v0.0.0 とする

      # 3. 前回タグから現在までのマージPRを取得してラベルを解析する
      - name: Analyze merged PRs since last tag
        id: analyze_prs
        run: |
          # 前回タグから現在までのコミット範囲を取得
          previous_tag="${{ steps.previous_tag.outputs.tag }}"
          echo "Previous tag: $previous_tag"
          
          # 前回タグから現在までのマージコミットを取得
          merge_commits=$(git log --merges --pretty=format:"%H %s" $previous_tag..HEAD)
          echo "Merge commits since $previous_tag:"
          echo "$merge_commits"
          
          # マージPRが存在しない場合は処理終了
          if [[ -z "$merge_commits" ]]; then
            echo "No merged PRs found since $previous_tag. Skipping release."
            echo "run_release=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # PRラベルを解析してバージョンレベルを決定
          has_minor=false
          
          # マージコミットからPR番号を抽出してラベルを確認
          while IFS= read -r line; do
            if [[ -n "$line" ]]; then
              # "Merge pull request #123" の形式からPR番号を抽出
              if [[ $line =~ Merge\ pull\ request\ \#([0-9]+) ]]; then
                pr_number=${BASH_REMATCH[1]}
                echo "Checking PR #$pr_number"
                
                # GitHub APIでPRのラベルを取得
                labels=$(gh pr view $pr_number --json labels --jq '.labels[].name' 2>/dev/null || echo "")
                echo "Labels for PR #$pr_number: $labels"
                
                # ラベルをチェック
                if echo "$labels" | grep -q -E "(new feature|enhancement|breaking change)"; then
                  echo "Found major/minor label in PR #$pr_number"
                  has_minor=true
                fi
              fi
            fi
          done <<< "$merge_commits"
          
          # バージョンレベルを決定
          if [ "$has_minor" = "true" ]; then
            echo "level=minor" >> $GITHUB_OUTPUT
            echo "run_release=true" >> $GITHUB_OUTPUT
            echo "Bump level: minor (found new feature/enhancement/breaking change)"
          else
            echo "level=patch" >> $GITHUB_OUTPUT
            echo "run_release=true" >> $GITHUB_OUTPUT
            echo "Bump level: patch (only bug fixes or no significant changes)"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # 4. 新しいバージョン番号を計算する
      - name: Calculate new version
        if: steps.analyze_prs.outputs.run_release == 'true'
        id: new_version
        run: |
          npm install semver
          new_tag=$(node -e "console.log('v' + require('semver').inc('${{ steps.previous_tag.outputs.tag }}', '${{ steps.analyze_prs.outputs.level }}'))")
          echo "tag=$new_tag" >> $GITHUB_OUTPUT
          echo "version_number=$(echo $new_tag | sed 's/v//')" >> $GITHUB_OUTPUT
          echo "New tag is: $new_tag"

      # 5. config/version.php ファイルを更新する
      - name: Update version file
        if: steps.analyze_prs.outputs.run_release == 'true'
        run: |
          sed -i "s/'cc_version' => '.*',/'cc_version' => '${{ steps.new_version.outputs.version_number }}',/" config/version.php
          echo "Updated config/version.php"
          cat config/version.php

      # 6. 変更をコミットしてプッシュする
      - name: Commit and push changes
        if: steps.analyze_prs.outputs.run_release == 'true'
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add config/version.php
          git commit -m "chore: Bump version to ${{ steps.new_version.outputs.tag }}"
          git push

      # 7. GitHub Releaseを作成する
      - name: Create GitHub Release
        if: steps.analyze_prs.outputs.run_release == 'true'
        uses: softprops/action-gh-release@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: ${{ steps.new_version.outputs.tag }}
          name: Release ${{ steps.new_version.outputs.tag }}
          generate_release_notes: true
          make_latest: true
          draft: false
          prerelease: false